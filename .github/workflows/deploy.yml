name: üöÄ Deploy FastAPI to Server

on:
  push:
    branches:
      - main  # –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –≤–µ—Ç–∫–∞

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üîê Checkout code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: üì¶ Install paramiko for SSH
        run: |
          pip install paramiko scp

      - name: üöÄ Run deployment script
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          python <<'EOF'
          import os, sys, tarfile, tempfile, pathlib
          import paramiko

          # --- Inputs from secrets (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ) ---
          host = os.getenv("SERVER_IP")
          user = os.getenv("SERVER_USER")
          password = os.getenv("SERVER_PASSWORD")

          if not all([host, user, password]):
            print("Missing SERVER_IP / SERVER_USER / SERVER_PASSWORD envs", file=sys.stderr)
            sys.exit(1)

          # --- Archive current repo (–∏—Å–∫–ª—é—á–∞–µ–º –º—É—Å–æ—Ä) ---
          workspace = os.getenv("GITHUB_WORKSPACE", ".")
          workspace_path = pathlib.Path(workspace)
          archive_local = pathlib.Path(tempfile.gettempdir()) / "release.tar.gz"

          exclude_names = {".git", ".github", "venv", "__pycache__", "tests"}
          def should_include(path: pathlib.Path) -> bool:
            # –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏/—Ñ–∞–π–ª—ã –ø–æ –≤–µ—Ä—Ö–Ω–∏–º –∏–º–µ–Ω–∞–º –∏ __pycache__ –≤ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è—Ö
            parts = set(path.parts)
            if any(p in exclude_names for p in parts):
              return False
            return True

          with tarfile.open(archive_local, "w:gz") as tar:
            for root, dirs, files in os.walk(workspace_path):
              # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ –ª–µ—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä—å
              dirs[:] = [d for d in dirs if should_include(pathlib.Path(root, d))]
              for f in files:
                fp = pathlib.Path(root, f)
                if should_include(fp):
                  tar.add(fp, arcname=str(fp.relative_to(workspace_path)))

          print(f"Created archive: {archive_local}")

          # --- SSH + SFTP upload ---
          ssh = paramiko.SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(hostname=host, username=user, password=password, timeout=30)

          sftp = ssh.open_sftp()
          remote_archive = "/tmp/release.tar.gz"
          sftp.put(str(archive_local), remote_archive)
          sftp.close()
          print(f"Uploaded archive to {remote_archive}")

          # --- Remote deploy script (–±–µ–∑ git pull) ---
          remote_cmd = r'''
          set -euo pipefail

          export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

          APP_DIR="/root/promo_backend"
          SERVICE="fastapi"

          # –°–æ–∑–¥–∞–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–¥–∞–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü—É —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          mkdir -p "$APP_DIR"
          chown -R "$USER":"$USER" "$APP_DIR"

          # –†–∞—Å–ø–∞–∫—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –∑–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
          TMP_DIR="$(mktemp -d /tmp/promo_release_XXXX)"
          tar -xzf /tmp/release.tar.gz -C "$TMP_DIR"

          # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å venv
          if [ ! -d "$APP_DIR/venv" ]; then
            python3 -m venv "$APP_DIR/venv"
          fi

          # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (–±–µ—Ä–µ–∂—ë–º venv)
          if command -v rsync >/dev/null 2>&1; then
            rsync -a --delete --exclude 'venv' "$TMP_DIR"/ "$APP_DIR"/
          else
            # –µ—Å–ª–∏ rsync –Ω–µ—Ç ‚Äî —É–¥–∞–ª–∏–º –≤—Å—ë, –∫—Ä–æ–º–µ venv, –∏ —Å–∫–æ–ø–∏—Ä—É–µ–º
            find "$APP_DIR" -mindepth 1 -maxdepth 1 ! -name 'venv' -exec rm -rf {} +
            cp -a "$TMP_DIR"/. "$APP_DIR"/
          fi

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          . "$APP_DIR/venv/bin/activate"
          python -m pip install --upgrade pip wheel
          if [ -f "$APP_DIR/requirements.txt" ]; then
            pip install --no-cache-dir -r "$APP_DIR/requirements.txt"
          fi

          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ systemd-—é–Ω–∏—Ç–∞
          systemctl daemon-reload
          systemctl restart "$SERVICE"
          systemctl status "$SERVICE" --no-pager --full

          # –£–±–æ—Ä–∫–∞
          rm -rf "$TMP_DIR"
          rm -f /tmp/release.tar.gz
          '''

          # –∑–∞–ø—É—Å—Ç–∏–º —á–µ—Ä–µ–∑ bash -lc, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          stdin, stdout, stderr = ssh.exec_command(f"bash -lc {remote_cmd!r}", get_pty=True)
          out, err = stdout.read().decode(), stderr.read().decode()
          code = stdout.channel.recv_exit_status()

          print(out)
          if err.strip():
            print(err, file=sys.stderr)

          ssh.close()
          sys.exit(code)
          EOF
