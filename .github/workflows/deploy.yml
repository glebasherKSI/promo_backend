name: 🚀 Deploy FastAPI to Server

on:
  push:
    branches:
      - main

jobs: 
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🔐 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install paramiko scp

      - name: 🚀 Run deployment script
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Рекомендуется вместо пароля
        run: |
          python <<EOF
          import paramiko
          import os
          import sys

          host = os.getenv("SERVER_IP")
          user = os.getenv("SERVER_USER")
          key = os.getenv("SSH_PRIVATE_KEY")

          # Сохраняем ключ во временный файл
          key_path = "/tmp/deploy_key"
          with open(key_path, "w") as f:
              f.write(key)
              f.write("\n")
          os.chmod(key_path, 0o600)

          # Подключение по SSH с ключом
          ssh = paramiko.SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          try:
              ssh.connect(hostname=host, username=user, key_filename=key_path, timeout=10)
          except Exception as e:
              print(f"❌ SSH connection failed: {e}")
              sys.exit(1)

          # Команда развёртывания
          command = '''
          set -e  # остановка при ошибке
          cd /root/promo_backend || { echo "❌ Directory not found"; exit 1; }

          echo "🔁 Pulling latest code..."
          git pull origin main || { echo "❌ Git pull failed"; exit 1; }

          echo "📦 Activating virtual environment..."
          if [ ! -f "venv/bin/activate" ]; then
              echo "❌ Virtual environment not found. Run: python -m venv venv"
              exit 1
          fi
          source venv/bin/activate

          echo "🔄 Upgrading pip..."
          pip install --upgrade pip --no-cache-dir || exit 1

          if [ -f "requirements.txt" ]; then
              echo "📥 Installing requirements..."
              pip install -r requirements.txt --no-cache-dir || { echo "❌ Pip install failed"; exit 1; }
          fi

          echo "🔄 Restarting FastAPI service..."
          systemctl restart fastapi || { echo "❌ Failed to restart service"; exit 1; }

          echo "✅ Deployment successful!"
          '''

          stdin, stdout, stderr = ssh.exec_command(command)
          out = stdout.read().decode()
          err = stderr.read().decode()

          print("STDOUT:")
          print(out)
          print("STDERR:")
          print(err)

          if stderr.channel.recv_exit_status() != 0:
              print("❌ Deployment failed!")
              sys.exit(1)

          ssh.close()
          EOF

