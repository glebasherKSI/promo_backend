import mysql.connector
import gspread
import os
from datetime import datetime
import json
from typing import Optional, Dict, Any

class SheetsToMySQLMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ MySQL"""
    
    def __init__(self, mysql_config: Dict[str, str], sheets_credentials_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            mysql_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            sheets_credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets
        """
        self.mysql_config = mysql_config
        self.sheets_credentials_path = sheets_credentials_path
        self.mysql_conn = None
        self.spreadsheet = None
        
    def connect_mysql(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL"""
        try:
            self.mysql_conn = mysql.connector.connect(**self.mysql_config)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            raise
    
    def connect_sheets(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
        try:
            gc = gspread.service_account(filename=self.sheets_credentials_path)
            self.spreadsheet = gc.open_by_key('1LrJyEzeyM5ULgR1QjWXcHW_jM2RsYPxOo2RqjQB8URw')
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise
    
    def parse_date(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        if not date_str or date_str.strip() == '':
            return None
        
        try:
            date_str = date_str.strip()
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if 'T' in date_str:
                # ISO —Ñ–æ—Ä–º–∞—Ç
                return datetime.fromisoformat(date_str.replace('Z', '+00:00')).replace(tzinfo=None)
            elif ' ' in date_str:
                # –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
                if '.' in date_str.split()[0]:
                    # DD.MM.YYYY HH:MM:SS
                    return datetime.strptime(date_str.split()[0], "%d.%m.%Y")
                else:
                    # YYYY-MM-DD HH:MM:SS
                    return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            elif '.' in date_str:
                # DD.MM.YYYY
                return datetime.strptime(date_str, "%d.%m.%Y")
            else:
                # YYYY-MM-DD
                return datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}': {e}")
            return None
    
    def find_user_by_email(self, email: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –¥–ª—è responsible_id"""
        if not email:
            return None
            
        cursor = self.mysql_conn.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE mail = %s", (email,))
            result = cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}: {e}")
            return None
        finally:
            cursor.close()
    
    def migrate_promotions(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ –ü–†–û–ú–û –≤ —Ç–∞–±–ª–∏—Ü—É promotions"""
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π...")
        
        try:
            promo_sheet = self.spreadsheet.worksheet('–ü–†–û–ú–û')
            promo_data = promo_sheet.get_all_records()
            
            cursor = self.mysql_conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # cursor.execute("TRUNCATE TABLE promotions")
            
            success_count = 0
            error_count = 0
            
            for row in promo_data:
                try:
                    if not row.get('id'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ id
                        continue
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    project = row.get('–ü—Ä–æ–µ–∫—Ç', '').strip() or None
                    promo_type = row.get('–¢–∏–ø –ø—Ä–æ–º–æ', '').strip() or None
                    promo_kind = row.get('–í–∏–¥ –ø—Ä–æ–º–æ', '').strip() or None
                    title = row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').strip()
                    comment = row.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '').strip() or None
                    segment = row.get('–°–µ–≥–º–µ–Ω—Ç', '').strip() or None
                    link = row.get('–°—Å—ã–ª–∫–∞', '').strip() or None
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                    start_date = self.parse_date(row.get('–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞', ''))
                    end_date = self.parse_date(row.get('–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞', ''))
                    
                    # –ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ —Å email)
                    responsible_id = None
                    if 'Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ' in row:
                        responsible_id = self.find_user_by_email(row.get('Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ', ''))
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    insert_query = """
                        INSERT INTO promotions 
                        (project, promo_type, promo_kind, start_date, end_date, 
                         title, comment, segment, link, responsible_id)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """
                    
                    cursor.execute(insert_query, (
                        project, promo_type, promo_kind, start_date, end_date,
                        title, comment, segment, link, responsible_id
                    ))
                    
                    success_count += 1
                    
                except Exception as e:
                    error_count += 1
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                    print(f"   –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {row}")
            
            self.mysql_conn.commit()
            cursor.close()
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   - –£—Å–ø–µ—à–Ω–æ: {success_count}")
            print(f"   - –û—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π: {e}")
            raise
    
    def migrate_informing(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ –ò–ù–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –≤ —Ç–∞–±–ª–∏—Ü—É informing"""
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            info_sheet = self.spreadsheet.worksheet('–ò–ù–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï')
            info_data = info_sheet.get_all_records()
            
            cursor = self.mysql_conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–∏–Ω–≥ ID –ø—Ä–æ–º–æ –∏–∑ Google Sheets –≤ MySQL ID
            promo_id_mapping = self.create_promo_id_mapping()
            
            success_count = 0
            error_count = 0
            
            for row in info_data:
                try:
                    if not row.get('id'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ id
                        continue
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    informing_type = row.get('–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '').strip()
                    project = row.get('–ü—Ä–æ–µ–∫—Ç', '').strip() or None
                    title = row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').strip()
                    comment = row.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '').strip() or None
                    segment = row.get('–°–µ–≥–º–µ–Ω—Ç', '').strip() or None
                    link = row.get('–°—Å—ã–ª–∫–∞', '').strip() or None
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    start_date = self.parse_date(row.get('–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞', ''))
                    
                    # –ù–∞—Ö–æ–¥–∏–º promo_id –≤ MySQL
                    sheets_promo_id = row.get('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–º–æ', '').strip()
                    mysql_promo_id = promo_id_mapping.get(sheets_promo_id) if sheets_promo_id else None
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    insert_query = """
                        INSERT INTO informing 
                        (informing_type, project, start_date, title, comment, segment, promo_id, link)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """
                    
                    cursor.execute(insert_query, (
                        informing_type, project, start_date, title, comment, segment, mysql_promo_id, link
                    ))
                    
                    success_count += 1
                    
                except Exception as e:
                    error_count += 1
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    print(f"   –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {row}")
            
            self.mysql_conn.commit()
            cursor.close()
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   - –£—Å–ø–µ—à–Ω–æ: {success_count}")
            print(f"   - –û—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def create_promo_id_mapping(self) -> Dict[str, int]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É ID –ø—Ä–æ–º–æ –∏–∑ Google Sheets –∏ MySQL"""
        print("üîÑ –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            promo_sheet = self.spreadsheet.worksheet('–ü–†–û–ú–û')
            promo_data = promo_sheet.get_all_records()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL
            cursor = self.mysql_conn.cursor()
            cursor.execute("SELECT id, title, project, start_date FROM promotions")
            mysql_promos = cursor.fetchall()
            cursor.close()
            
            mapping = {}
            
            for sheets_row in promo_data:
                sheets_id = sheets_row.get('id', '').strip()
                if not sheets_id:
                    continue
                
                sheets_title = sheets_row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '').strip()
                sheets_project = sheets_row.get('–ü—Ä–æ–µ–∫—Ç', '').strip()
                sheets_start_date = self.parse_date(sheets_row.get('–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞', ''))
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ MySQL –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—Ä–æ–µ–∫—Ç—É
                for mysql_id, mysql_title, mysql_project, mysql_start_date in mysql_promos:
                    if (mysql_title == sheets_title and 
                        mysql_project == sheets_project and
                        mysql_start_date == sheets_start_date):
                        mapping[sheets_id] = mysql_id
                        break
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(mapping)} –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π")
            return mapping
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            return {}
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ MySQL")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.connect_mysql()
            self.connect_sheets()
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è
            self.migrate_promotions()
            self.migrate_informing()
            
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.mysql_conn:
                self.mysql_conn.close()
                print("üîå MySQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL
    mysql_config = {
        'host': '91.209.226.31',  # –∏–ª–∏ –≤–∞—à —Ö–æ—Å—Ç
        'user': 'promo_user',
        'password': '789159987Cs',
        'database': 'promo_db',
        'charset': 'utf8mb4',
        'autocommit': False
    }

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets
    sheets_credentials_path = '../data/data.json'
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
    migrator = SheetsToMySQLMigrator(mysql_config, sheets_credentials_path)
    migrator.run_migration()

if __name__ == "__main__":
    main()