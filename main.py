from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional, Literal
import os
import uuid
from datetime import datetime, date, timedelta
import calendar
from pydantic import BaseModel, validator
import pandas as pd
from roaters.promo_fields import router as promo_fields_router
from database import get_repositories


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
SECRET_KEY = "your-secret-key-here"  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24  # 24 —á–∞—Å–∞

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π

app = FastAPI(title="Promo Calendar API", version="1.0.0")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(promo_fields_router)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —ÅReact
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3001",
        "http://localhost:3000",     # React dev server
        "http://localhost:5173",     # Vite dev server
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173",
        "http://192.168.168.14:3000",
        "http://192.168.168.14:5173",
        "https://delicate-cat-e905cc.netlify.app",
        "https://promo-gb.duckdns.org"

    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# Pydantic –º–æ–¥–µ–ª–∏

def validate_id_field(v):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è ID –ø–æ–ª–µ–π - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–∞ –∏ UUID"""
    if v:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π ID –∏–∑ –ë–î)
        if str(v).isdigit():
            return str(v)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ UUID (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        try:
            uuid.UUID(v)
            return v
        except ValueError:
            raise ValueError('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–º UUID')
    return v

class InfoChannelInput(BaseModel):
    id: Optional[str] = None  # None –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    type: str
    start_date: str
    name: str
    comment: Optional[str] = ""
    segments: str = "–°–ù–ì"
    link: Optional[str] = ""
    project: Optional[str] = None  # –î–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
    
    @validator('id')
    def validate_id(cls, v):
        return validate_id_field(v)

class PromoEventCreate(BaseModel):
    project: str
    promo_type: str
    promo_kind: str = ""
    start_date: str
    end_date: str
    name: str
    comment: Optional[str] = ""
    segments: str = "–°–ù–ì"
    info_channels: List[InfoChannelInput] = []  # –ò–∑–º–µ–Ω—è–µ–º —Å dict –Ω–∞ List[InfoChannelInput]
    link: Optional[str] = ""

class PromoEvent(BaseModel):
    id: str
    project: str
    promo_type: str
    promo_kind: str
    start_date: str
    end_date: str
    name: str
    comment: str
    segments: str
    info_channels: List[dict] = []
    link: str = ""

class InfoEvent(BaseModel):
    id: str
    info_type: str
    project: str
    start_date: str
    name: str
    comment: str
    segments: str
    promo_id: str
    link: str = ""

class CalendarData(BaseModel):
    year: int
    month: int
    events: List[dict]

class PromoEventUpdate(BaseModel):
    project: str
    promo_type: str
    promo_kind: str
    start_date: str
    end_date: str
    name: str
    comment: Optional[str] = ""
    segments: str
    link: Optional[str] = ""
    info_channels: List[InfoChannelInput] = []  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è

class InfoChannelUpdate(BaseModel):
    type: str
    project: str
    start_date: str
    name: str
    comment: str
    segments: str
    promo_id: str
    link: Optional[str] = ""

class InfoChannelCreate(BaseModel):
    type: Literal["E-mail", "MSGR", "BPS", "PUSH", "SMM", "–ë–∞–Ω–Ω–µ—Ä", "–°—Ç—Ä–∞–Ω–∏—Ü–∞", "–ù–æ–≤–æ—Å—Ç–∏"]
    project: str
    start_date: str
    name: str
    comment: Optional[str] = ""
    segments: str = "–°–ù–ì"
    link: Optional[str] = ""
    promo_id: Optional[str] = None
    
    @validator('name')
    def name_must_not_be_empty(cls, v):
        if not v or not v.strip():
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()
    
    @validator('start_date')
    def validate_start_date(cls, v):
        if not v:
            return v
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            if 'T' in v:
                # ISO —Ñ–æ—Ä–º–∞—Ç —Å T
                datetime.fromisoformat(v.replace('Z', '+00:00'))
            elif ' ' in v:
                # –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
                datetime.strptime(v, '%Y-%m-%d %H:%M:%S')
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                datetime.strptime(v, '%Y-%m-%d')
            return v
        except ValueError:
            raise ValueError('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO datetime, YYYY-MM-DD HH:MM:SS –∏–ª–∏ YYYY-MM-DD')
    
    @validator('promo_id')
    def validate_promo_id(cls, v):
        return validate_id_field(v)
    
    @validator('comment', 'link', pre=True)
    def empty_str_to_none(cls, v):
        return v if v is not None else ""

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class UserLogin(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    username: str
    role: str
    token: str

# –£–¥–∞–ª–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ Google Sheets



def get_repos():
    """–•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return get_repositories()
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î, –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ MySQL —Å–µ—Ä–≤–µ—Ä")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ:")
        print("      MYSQL_HOST=91.209.226.31")
        print("      MYSQL_USER=promo_user") 
        print("      MYSQL_PASSWORD=789159987Cs")
        print("      MYSQL_DATABASE=promo_db")
        print("      MYSQL_PORT=3306")
        print("   3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ —Å–µ—Ç–∏")
        raise HTTPException(
            status_code=503, 
            detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —Å–µ—Ä–≤–µ—Ä—É."
        )

@app.get("/")
async def root():
    return {"message": "Promo Calendar API"}

def convert_date_to_iso(date_str: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ ISO —Ñ–æ—Ä–º–∞—Ç"""
    if not date_str:
        return ""
    try:
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–±–µ–ª—ã
        date_str = date_str.strip()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        if 'T' in date_str:
            # –£–∂–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
            parsed_date = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        elif ' ' in date_str:
            # –§–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM:SS –∏–ª–∏ YYYY-MM-DD HH:MM:SS
            if '.' in date_str.split()[0]:
                parsed_date = datetime.strptime(date_str.split()[0], "%d.%m.%Y")
            else:
                parsed_date = datetime.strptime(date_str.split()[0], "%Y-%m-%d")
        elif '.' in date_str:
            # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
            parsed_date = datetime.strptime(date_str, "%d.%m.%Y")
        else:
            # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            parsed_date = datetime.strptime(date_str, "%Y-%m-%d")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
        return parsed_date.isoformat() + "Z"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã '{date_str}': {str(e)}")
        return date_str

@app.get("/api/events")
async def get_events():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–≤–º–µ—Å—Ç–æ N+1)
        promotions = promo_repo.get_all_promotions_with_informing()
        
        if not promotions:
            return {"events": []}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        aggregated_data = []
        for promo in promotions:
            try:
                event = {
                    'id': str(promo['id']),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'project': promo.get('project', ''),
                    'promo_type': promo.get('promo_type', ''),
                    'promo_kind': promo.get('promo_kind', ''),
                    'start_date': promo.get('start_date', ''),
                    'end_date': promo.get('end_date', ''),
                    'name': promo.get('title', ''),  # –í –ë–î —ç—Ç–æ title
                    'comment': promo.get('comment', ''),
                    'segments': promo.get('segment', ''),  # –í –ë–î —ç—Ç–æ segment
                    'link': promo.get('link', ''),
                    'info_channels': promo.get('info_channels', [])  # –£–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç JOIN
                }
                
                aggregated_data.append(event)
            except Exception as row_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ {promo.get('id')}: {str(row_error)}")
                continue
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(aggregated_data)} —Å–æ–±—ã—Ç–∏–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
        return {"events": aggregated_data}
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@app.post("/api/events")
async def create_event(event: PromoEventCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not event.project or not event.promo_type or not event.name:
            raise HTTPException(status_code=400, detail="–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
        promo_data = {
            'project': event.project,
            'promo_type': event.promo_type,
            'promo_kind': event.promo_kind,
            'start_date': event.start_date,
            'end_date': event.end_date,
            'name': event.name,  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ title
            'comment': event.comment or '',
            'segments': event.segments or '–°–ù–ì',  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ segment
            'link': event.link or '',
            'responsible_id': None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é
        promotion_id = promo_repo.create_promotion(promo_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        if event.info_channels:
            for channel in event.info_channels:
                if channel.start_date:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã
                    info_data = {
                        'type': channel.type,  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ informing_type
                        'project': channel.project or event.project,
                        'start_date': channel.start_date,
                        'name': channel.name,  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ title
                        'comment': channel.comment or '',
                        'segments': channel.segments or '–°–ù–ì',  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ segment
                        'promo_id': promotion_id,
                        'link': channel.link or ''
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                    informing_repo.create_informing(info_data)
        
        return {"message": "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ", "id": str(promotion_id)}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {str(e)}")

@app.get("/api/calendar/{year}/{month}")
async def get_calendar_data(year: int, month: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        events_response = await get_events()
        events = events_response["events"]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü—É
        _, num_days = calendar.monthrange(year, month)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ —Ç–∏–ø–∞–º
        projects = set()
        events_by_project_type = {}
        
        for event in events:
            project = event.get('project')
            if not project:
                continue
            projects.add(project)
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            promo_type = event.get('promo_type')
            if promo_type and event_intersects_month(event, year, month):
                key = (project, promo_type)
                if key not in events_by_project_type:
                    events_by_project_type[key] = []
                events_by_project_type[key].append(event)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
            for info in event.get('info_channels', []):
                info_type = info.get('type')
                info_project = info.get('project', project)
                if info_type and info_intersects_month(info, year, month):
                    projects.add(info_project)
                    key = (info_project, info_type)
                    if key not in events_by_project_type:
                        events_by_project_type[key] = []
                    events_by_project_type[key].append(info)
        
        return {
            "year": year,
            "month": month,
            "num_days": num_days,
            "projects": sorted(list(projects)),
            "events_by_project_type": events_by_project_type
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")

def event_intersects_month(event, year, month):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    start_str = event.get('start_date')
    end_str = event.get('end_date') or start_str
    
    if not start_str:
        return False
    
    try:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            start = datetime.strptime(start_str.split()[0], "%d.%m.%Y").date()
        except ValueError:
            start = datetime.strptime(start_str.split('T')[0], "%Y-%m-%d").date()
            
        if end_str:
            try:
                end = datetime.strptime(end_str.split()[0], "%d.%m.%Y").date()
            except ValueError:
                end = datetime.strptime(end_str.split('T')[0], "%Y-%m-%d").date()
        else:
            end = start
    except Exception:
        return False
    
    first_day = date(year, month, 1)
    last_day = date(year, month, calendar.monthrange(year, month)[1])
    
    return not (end < first_day or start > last_day)

def info_intersects_month(info, year, month):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    start_str = info.get('start_date')
    
    if not start_str:
        return False
    
    try:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            start = datetime.strptime(start_str.split()[0], "%d.%m.%Y").date()
        except ValueError:
            start = datetime.strptime(start_str.split('T')[0], "%Y-%m-%d").date()
    except Exception:
        return False
    
    first_day = date(year, month, 1)
    last_day = date(year, month, calendar.monthrange(year, month)[1])
    
    return first_day <= start <= last_day

@app.put("/api/events/{event_id}")
async def update_event(event_id: str, event: PromoEventUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –∏ –µ–≥–æ –∫–∞–Ω–∞–ª—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        promotion_id = int(event_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
        existing_promotion = promo_repo.get_promotion_by_id(promotion_id)
        if not existing_promotion:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
        promo_data = {
            'project': event.project,
            'promo_type': event.promo_type,
            'promo_kind': event.promo_kind,
            'start_date': event.start_date,
            'end_date': event.end_date,
            'name': event.name,  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ title
            'comment': event.comment,
            'segments': event.segments,  # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–æ–ª–µ segment
            'link': event.link,
            'responsible_id': existing_promotion.get('responsible_id')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é
        promo_repo.update_promotion(promotion_id, promo_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ
        existing_channels = informing_repo.get_informing_by_promo_id(promotion_id)
        existing_channel_ids = {str(ch['id']): ch['id'] for ch in existing_channels}
        
        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        processed_channel_ids = set()
        
        for channel in event.info_channels:
            if channel.id and str(channel.id) in existing_channel_ids:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                channel_data = {
                    'type': channel.type,
                    'project': event.project,
                    'start_date': channel.start_date,
                    'name': channel.name,
                    'comment': channel.comment,
                    'segments': channel.segments,
                    'promo_id': promotion_id,
                    'link': channel.link
                }
                
                informing_repo.update_informing(existing_channel_ids[str(channel.id)], channel_data)
                processed_channel_ids.add(str(channel.id))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                channel_data = {
                    'type': channel.type,
                    'project': event.project,
                    'start_date': channel.start_date,
                    'name': channel.name,
                    'comment': channel.comment,
                    'segments': channel.segments,
                    'promo_id': promotion_id,
                    'link': channel.link
                }
                
                informing_repo.create_informing(channel_data)
        
        # 3. –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
        for channel_id_str, channel_id in existing_channel_ids.items():
            if channel_id_str not in processed_channel_ids:
                informing_repo.delete_informing(channel_id)
        
        return {
            "message": "–ü—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –∏ –∫–∞–Ω–∞–ª—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "id": event_id
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–±—ã—Ç–∏—è")
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏—è: {str(e)}"
        )

@app.put("/api/channels/{channel_id}")
async def update_channel(channel_id: str, channel: InfoChannelUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        informing_id = int(channel_id)
        promo_id = int(channel.promo_id) if channel.promo_id else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        channel_data = {
            'type': channel.type,
            'project': channel.project,
            'start_date': channel.start_date,
            'name': channel.name,
            'comment': channel.comment,
            'segments': channel.segments,
            'promo_id': promo_id,
            'link': channel.link
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        success = informing_repo.update_informing(informing_id, channel_data)
        
        if not success:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {"message": "–ö–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}
        
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞")
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@app.delete("/api/events/{event_id}")
async def delete_event(event_id: str):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∫–∞–Ω–∞–ª—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        promotion_id = int(event_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
        existing_promotion = promo_repo.get_promotion_by_id(promotion_id)
        if not existing_promotion:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
        existing_channels = informing_repo.get_informing_by_promo_id(promotion_id)
        channels_count = len(existing_channels)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é (–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–∞—Å–∫–∞–¥–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
        success = promo_repo.delete_promotion(promotion_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return {
            "message": "–ü—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
            "deleted_channels_count": channels_count
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–±—ã—Ç–∏—è")
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

@app.delete("/api/channels/{channel_id}")
async def delete_channel(channel_id: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        informing_id = int(channel_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        success = informing_repo.delete_informing(informing_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {"message": "–ö–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞")
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@app.post("/api/channels", status_code=status.HTTP_201_CREATED)
async def create_channel(channel: InfoChannelCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not channel.type or not channel.project or not channel.name:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        channel_data = {
            'type': channel.type,
            'project': channel.project,
            'start_date': channel.start_date,
            'name': channel.name,
            'comment': channel.comment or '',
            'segments': channel.segments or '–°–ù–ì',
            'promo_id': int(channel.promo_id) if channel.promo_id else None,
            'link': channel.link or ''
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        informing_id = informing_repo.create_informing(channel_data)
        
        return {
            "message": "–ö–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "id": str(informing_id),
            "channel": {
                "id": str(informing_id),
                "type": channel.type,
                "project": channel.project,
                "start_date": channel.start_date,
                "name": channel.name,
                "comment": channel.comment or '',
                "segments": channel.segments or '–°–ù–ì',
                "link": channel.link or '',
                "promo_id": channel.promo_id
            }
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

@app.post("/api/auth/login")
async def login(user_data: UserLogin):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        promo_repo, informing_repo, user_repo = get_repos()
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = user_repo.get_user_by_credentials(user_data.username, user_data.password)
        
        if user:
            return {
                "user": {
                    "username": user.get('login'),
                    "role": user.get('role', 'user')
                }
            }
        
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 