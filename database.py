import mysql.connector
from mysql.connector import pooling
import os
from datetime import datetime, date
from typing import List, Optional, Dict, Any
from contextlib import contextmanager
import logging
from dotenv import load_dotenv
import calendar

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞
        self.host = os.getenv('MYSQL_HOST', 'localhost')
        self.user = os.getenv('MYSQL_USER', 'promo_user')
        self.password = os.getenv('MYSQL_PASSWORD', '789159987Cs')
        self.database = os.getenv('MYSQL_DATABASE', 'promo_db')
        self.port = int(os.getenv('MYSQL_PORT', '3306'))
        
        self.config = {
            'host': self.host,
            'user': self.user,
            'password': self.password,
            'database': self.database,
            'charset': 'utf8mb4',
            'autocommit': False,
            'port': self.port,
            'pool_name': 'promo_pool',
            'pool_size': 10,
            'pool_reset_session': True
        }
        
        print(f"üîß –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î:")
        print(f"   HOST: {self.config['host']}")
        print(f"   USER: {self.config['user']}")
        print(f"   DATABASE: {self.config['database']}")
        print(f"   PORT: {self.config['port']}")
        print(f"   PASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if self.config['password'] else '–ù–µ—Ç'}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ .env —Ñ–∞–π–ª–∞
        env_path = os.path.join(os.getcwd(), '.env')
        print(f"üîç –ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞ –≤: {env_path}")
        print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print(f"üìÑ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'–î–∞' if os.path.exists('.env') else '–ù–µ—Ç'}")
        
        if os.path.exists('.env'):
            with open('.env', 'r') as f:
                content = f.read()
                print(f"üìã –†–∞–∑–º–µ—Ä .env —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É - –≤—ã–Ω–æ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–æ–∫ –Ω–∞—Ä—É–∂—É
                env_variables = [line.split('=')[0] for line in content.split('\n') if '=' in line]
                print(f"üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: {env_variables}")
    
    def get_pool_config(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return self.config

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.config = DatabaseConfig()
        self.pool = None
        self._initialize_pool()
    
    def _initialize_pool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            config = self.config.get_pool_config()
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {config['host']}:{config['port']}")
            logger.info(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config['user']}, –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config['database']}")
            
            self.pool = pooling.MySQLConnectionPool(**config)
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π MySQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.error("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ MySQL —Å–µ—Ä–≤–µ—Ä")
            logger.error("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("   - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ —Å–µ—Ç–∏")
            raise
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        connection = None
        try:
            connection = self.pool.get_connection()
            yield connection
        except Exception as e:
            if connection:
                connection.rollback()
            raise
        finally:
            if connection:
                connection.close()
    
    @contextmanager
    def get_cursor(self, dictionary=True):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞"""
        with self.get_connection() as connection:
            cursor = connection.cursor(dictionary=dictionary)
            try:
                yield cursor, connection
            finally:
                cursor.close()

class PromoRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
    
    def get_all_promotions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    SELECT p.*, u.login as responsible_name
                    FROM promotions p
                    LEFT JOIN users u ON p.responsible_id = u.id
                    ORDER BY p.start_date DESC
                """
                cursor.execute(query)
                promotions = cursor.fetchall()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                for promo in promotions:
                    if promo['start_date']:
                        promo['start_date'] = promo['start_date'].isoformat() + "Z"
                    if promo['end_date']:
                        promo['end_date'] = promo['end_date'].isoformat() + "Z"
                
                return promotions
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π: {e}")
            raise
    
    def get_all_promotions_with_informing(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                # –ï–¥–∏–Ω—ã–π JOIN –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N+1 –∑–∞–ø—Ä–æ—Å–æ–≤
                query = """
                    SELECT 
                        p.id as promo_id,
                        p.project,
                        p.promo_type,
                        p.promo_kind,
                        p.start_date as promo_start_date,
                        p.end_date as promo_end_date,
                        p.title as promo_title,
                        p.comment as promo_comment,
                        p.segment as promo_segment,
                        p.link as promo_link,
                        p.responsible_id,
                        u.login as responsible_name,
                        i.id as info_id,
                        i.informing_type,
                        i.project as info_project,
                        i.start_date as info_start_date,
                        i.title as info_title,
                        i.comment as info_comment,
                        i.segment as info_segment,
                        i.link as info_link
                    FROM promotions p
                    LEFT JOIN users u ON p.responsible_id = u.id
                    LEFT JOIN informing i ON p.id = i.promo_id
                    ORDER BY p.start_date DESC, i.start_date ASC
                """
                
                cursor.execute(query)
                rows = cursor.fetchall()
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º
                promotions_map = {}
                
                for row in rows:
                    promo_id = row['promo_id']
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                    if promo_id not in promotions_map:
                        promo_start_date = row['promo_start_date']
                        promo_end_date = row['promo_end_date']
                        
                        promotions_map[promo_id] = {
                            'id': promo_id,
                            'project': row['project'] or '',
                            'promo_type': row['promo_type'] or '',
                            'promo_kind': row['promo_kind'] or '',
                            'start_date': promo_start_date.isoformat() + "Z" if promo_start_date else '',
                            'end_date': promo_end_date.isoformat() + "Z" if promo_end_date else '',
                            'title': row['promo_title'] or '',
                            'comment': row['promo_comment'] or '',
                            'segment': row['promo_segment'] or '',
                            'link': row['promo_link'] or '',
                            'responsible_id': row['responsible_id'],
                            'responsible_name': row['responsible_name'],
                            'info_channels': []
                        }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if row['info_id']:
                        info_start_date = row['info_start_date']
                        
                        info_channel = {
                            'id': row['info_id'],
                            'type': row['informing_type'] or '',
                            'project': row['info_project'] or row['project'] or '',
                            'start_date': info_start_date.isoformat() + "Z" if info_start_date else '',
                            'name': row['info_title'] or '',
                            'comment': row['info_comment'] or '',
                            'segments': row['info_segment'] or '',
                            'promo_id': promo_id,
                            'link': row['info_link'] or ''
                        }
                        
                        promotions_map[promo_id]['info_channels'].append(info_channel)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π
                promotions_list = list(promotions_map.values())
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(promotions_list)} –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
                return promotions_list
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏: {e}")
            raise

    def get_promotions_by_month(self, month: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM"
            year, month_num = month.split('-')
            year, month_num = int(year), int(month_num)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            first_day = date(year, month_num, 1)
            last_day = date(year, month_num, calendar.monthrange(year, month_num)[1])
            
            with self.db.get_cursor() as (cursor, connection):
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–µ–º
                query = """
                    SELECT 
                        p.id as promo_id,
                        p.project,
                        p.promo_type,
                        p.promo_kind,
                        p.start_date as promo_start_date,
                        p.end_date as promo_end_date,
                        p.title as promo_title,
                        p.comment as promo_comment,
                        p.segment as promo_segment,
                        p.link as promo_link,
                        p.responsible_id,
                        u.login as responsible_name,
                        i.id as info_id,
                        i.informing_type,
                        i.project as info_project,
                        i.start_date as info_start_date,
                        i.title as info_title,
                        i.comment as info_comment,
                        i.segment as info_segment,
                        i.link as info_link
                    FROM promotions p
                    LEFT JOIN users u ON p.responsible_id = u.id
                    LEFT JOIN informing i ON p.id = i.promo_id
                    WHERE (
                        -- –ü—Ä–æ–º–æ-–∞–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
                        (p.start_date >= %s AND p.start_date <= %s)
                        OR 
                        -- –ü—Ä–æ–º–æ-–∞–∫—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
                        (p.end_date >= %s AND p.end_date <= %s)
                        OR
                        -- –ü—Ä–æ–º–æ-–∞–∫—Ü–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ)
                        (p.start_date <= %s AND p.end_date >= %s)
                        OR
                        -- –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
                        (i.start_date >= %s AND i.start_date <= %s)
                    )
                    ORDER BY p.start_date DESC, i.start_date ASC
                """
                
                cursor.execute(query, (
                    first_day, last_day,  # start_date –≤ –º–µ—Å—è—Ü–µ
                    first_day, last_day,  # end_date –≤ –º–µ—Å—è—Ü–µ
                    first_day, last_day,  # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
                    first_day, last_day   # –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Å—è—Ü–µ
                ))
                rows = cursor.fetchall()
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º
                promotions_map = {}
                
                for row in rows:
                    promo_id = row['promo_id']
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                    if promo_id not in promotions_map:
                        promo_start_date = row['promo_start_date']
                        promo_end_date = row['promo_end_date']
                        
                        promotions_map[promo_id] = {
                            'id': promo_id,
                            'project': row['project'] or '',
                            'promo_type': row['promo_type'] or '',
                            'promo_kind': row['promo_kind'] or '',
                            'start_date': promo_start_date.isoformat() + "Z" if promo_start_date else '',
                            'end_date': promo_end_date.isoformat() + "Z" if promo_end_date else '',
                            'title': row['promo_title'] or '',
                            'comment': row['promo_comment'] or '',
                            'segment': row['promo_segment'] or '',
                            'link': row['promo_link'] or '',
                            'responsible_id': row['responsible_id'],
                            'responsible_name': row['responsible_name'],
                            'info_channels': []
                        }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if row['info_id']:
                        info_start_date = row['info_start_date']
                        
                        info_channel = {
                            'id': row['info_id'],
                            'type': row['informing_type'] or '',
                            'project': row['info_project'] or row['project'] or '',
                            'start_date': info_start_date.isoformat() + "Z" if info_start_date else '',
                            'name': row['info_title'] or '',
                            'comment': row['info_comment'] or '',
                            'segments': row['info_segment'] or '',
                            'promo_id': promo_id,
                            'link': row['info_link'] or ''
                        }
                        
                        promotions_map[promo_id]['info_channels'].append(info_channel)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π
                promotions_list = list(promotions_map.values())
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(promotions_list)} –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –∑–∞ {month} —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏")
                return promotions_list
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü {month}: {e}")
            raise
    
    def get_promotion_by_id(self, promotion_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é –ø–æ ID"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    SELECT p.*, u.login as responsible_name
                    FROM promotions p
                    LEFT JOIN users u ON p.responsible_id = u.id
                    WHERE p.id = %s
                """
                cursor.execute(query, (promotion_id,))
                promotion = cursor.fetchone()
                
                if promotion:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    if promotion['start_date']:
                        promotion['start_date'] = promotion['start_date'].isoformat() + "Z"
                    if promotion['end_date']:
                        promotion['end_date'] = promotion['end_date'].isoformat() + "Z"
                
                return promotion
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ {promotion_id}: {e}")
            raise
    
    def create_promotion(self, promotion_data: Dict[str, Any]) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    INSERT INTO promotions 
                    (project, promo_type, promo_kind, start_date, end_date, 
                     title, comment, segment, link, responsible_id)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                start_date = self._parse_date(promotion_data.get('start_date'))
                end_date = self._parse_date(promotion_data.get('end_date'))
                
                cursor.execute(query, (
                    promotion_data.get('project'),
                    promotion_data.get('promo_type'),
                    promotion_data.get('promo_kind'),
                    start_date,
                    end_date,
                    promotion_data.get('name'),  # –í –ë–î —ç—Ç–æ title
                    promotion_data.get('comment'),
                    promotion_data.get('segments'),  # –í –ë–î —ç—Ç–æ segment
                    promotion_data.get('link'),
                    promotion_data.get('responsible_id')
                ))
                
                promotion_id = cursor.lastrowid
                connection.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è —Å ID: {promotion_id}")
                return promotion_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏: {e}")
            raise
    
    def create_promotions_batch(self, promotions_data: List[Dict[str, Any]]) -> List[int]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (batch insert)"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    INSERT INTO promotions 
                    (project, promo_type, promo_kind, start_date, end_date, 
                     title, comment, segment, link, responsible_id)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch insert
                values = []
                for promo_data in promotions_data:
                    start_date = self._parse_date(promo_data.get('start_date'))
                    end_date = self._parse_date(promo_data.get('end_date'))
                    
                    values.append((
                        promo_data.get('project'),
                        promo_data.get('promo_type'),
                        promo_data.get('promo_kind'),
                        start_date,
                        end_date,
                        promo_data.get('name'),  # –í –ë–î —ç—Ç–æ title
                        promo_data.get('comment'),
                        promo_data.get('segments'),  # –í –ë–î —ç—Ç–æ segment
                        promo_data.get('link'),
                        promo_data.get('responsible_id')
                    ))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º batch insert
                cursor.executemany(query, values)
                connection.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                first_id = cursor.lastrowid
                created_ids = list(range(first_id, first_id + len(promotions_data)))
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_ids)} –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º: {created_ids}")
                return created_ids
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ batch —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π: {e}")
            raise
    
    def update_promotion(self, promotion_id: int, promotion_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    UPDATE promotions 
                    SET project = %s, promo_type = %s, promo_kind = %s, 
                        start_date = %s, end_date = %s, title = %s, 
                        comment = %s, segment = %s, link = %s, responsible_id = %s,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s
                """
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                start_date = self._parse_date(promotion_data.get('start_date'))
                end_date = self._parse_date(promotion_data.get('end_date'))
                
                cursor.execute(query, (
                    promotion_data.get('project'),
                    promotion_data.get('promo_type'),
                    promotion_data.get('promo_kind'),
                    start_date,
                    end_date,
                    promotion_data.get('name'),
                    promotion_data.get('comment'),
                    promotion_data.get('segments'),
                    promotion_data.get('link'),
                    promotion_data.get('responsible_id'),
                    promotion_id
                ))
                
                affected_rows = cursor.rowcount
                connection.commit()
                
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è {promotion_id}")
                return affected_rows > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ {promotion_id}: {e}")
            raise
    
    def delete_promotion(self, promotion_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("DELETE FROM informing WHERE promo_id = %s", (promotion_id,))
                
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é
                cursor.execute("DELETE FROM promotions WHERE id = %s", (promotion_id,))
                
                affected_rows = cursor.rowcount
                connection.commit()
                
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è {promotion_id}")
                return affected_rows > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ {promotion_id}: {e}")
            raise
    
    def _parse_date(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not date_str:
            return None
        
        try:
            date_str = date_str.strip()
            
            if 'T' in date_str:
                # ISO —Ñ–æ—Ä–º–∞—Ç
                return datetime.fromisoformat(date_str.replace('Z', '+00:00')).replace(tzinfo=None)
            elif ' ' in date_str:
                # –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
                return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                return datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}': {e}")
            return None

class InformingRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
    
    def get_all_informing(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    SELECT i.*, p.title as promo_title
                    FROM informing i
                    LEFT JOIN promotions p ON i.promo_id = p.id
                    ORDER BY i.start_date DESC
                """
                cursor.execute(query)
                informings = cursor.fetchall()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                for info in informings:
                    if info['start_date']:
                        info['start_date'] = info['start_date'].isoformat() + "Z"
                
                return informings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            raise
    
    def get_informing_by_promo_id(self, promo_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    SELECT * FROM informing 
                    WHERE promo_id = %s 
                    ORDER BY start_date
                """
                cursor.execute(query, (promo_id,))
                informings = cursor.fetchall()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                for info in informings:
                    if info['start_date']:
                        info['start_date'] = info['start_date'].isoformat() + "Z"
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                    info['type'] = info['informing_type']
                    info['name'] = info['title']
                    info['segments'] = info['segment']
                
                return informings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–º–æ {promo_id}: {e}")
            raise
    
    def create_informing(self, informing_data: Dict[str, Any]) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    INSERT INTO informing 
                    (informing_type, project, start_date, title, comment, segment, promo_id, link)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """
                
                start_date = self._parse_date(informing_data.get('start_date'))
                
                cursor.execute(query, (
                    informing_data.get('type'),  # –í –ë–î —ç—Ç–æ informing_type
                    informing_data.get('project'),
                    start_date,
                    informing_data.get('name'),  # –í –ë–î —ç—Ç–æ title
                    informing_data.get('comment'),
                    informing_data.get('segments'),  # –í –ë–î —ç—Ç–æ segment
                    informing_data.get('promo_id'),
                    informing_data.get('link')
                ))
                
                informing_id = cursor.lastrowid
                connection.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID: {informing_id}")
                return informing_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def create_informings_batch(self, informings_data: List[Dict[str, Any]]) -> List[int]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (batch insert)"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    INSERT INTO informing 
                    (informing_type, project, start_date, title, comment, segment, promo_id, link)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch insert
                values = []
                for info_data in informings_data:
                    start_date = self._parse_date(info_data.get('start_date'))
                    
                    values.append((
                        info_data.get('type'),  # –í –ë–î —ç—Ç–æ informing_type
                        info_data.get('project'),
                        start_date,
                        info_data.get('name'),  # –í –ë–î —ç—Ç–æ title
                        info_data.get('comment'),
                        info_data.get('segments'),  # –í –ë–î —ç—Ç–æ segment
                        info_data.get('promo_id'),
                        info_data.get('link')
                    ))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º batch insert
                cursor.executemany(query, values)
                connection.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                first_id = cursor.lastrowid
                created_ids = list(range(first_id, first_id + len(informings_data)))
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_ids)} –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º: {created_ids}")
                return created_ids
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ batch —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            raise
    
    def update_informing(self, informing_id: int, informing_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = """
                    UPDATE informing 
                    SET informing_type = %s, project = %s, start_date = %s, 
                        title = %s, comment = %s, segment = %s, promo_id = %s, 
                        link = %s, updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s
                """
                
                start_date = self._parse_date(informing_data.get('start_date'))
                
                cursor.execute(query, (
                    informing_data.get('type'),
                    informing_data.get('project'),
                    start_date,
                    informing_data.get('name'),
                    informing_data.get('comment'),
                    informing_data.get('segments'),
                    informing_data.get('promo_id'),
                    informing_data.get('link'),
                    informing_id
                ))
                
                affected_rows = cursor.rowcount
                connection.commit()
                
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ {informing_id}")
                return affected_rows > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è {informing_id}: {e}")
            raise
    
    def delete_informing(self, informing_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                cursor.execute("DELETE FROM informing WHERE id = %s", (informing_id,))
                
                affected_rows = cursor.rowcount
                connection.commit()
                
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ {informing_id}")
                return affected_rows > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è {informing_id}: {e}")
            raise
    
    def _parse_date(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not date_str:
            return None
        
        try:
            date_str = date_str.strip()
            
            if 'T' in date_str:
                # ISO —Ñ–æ—Ä–º–∞—Ç
                return datetime.fromisoformat(date_str.replace('Z', '+00:00')).replace(tzinfo=None)
            elif ' ' in date_str:
                # –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º
                return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                return datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}': {e}")
            return None

class UserRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
    
    def get_user_by_credentials(self, username: str, password: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = "SELECT * FROM users WHERE login = %s AND password = %s"
                cursor.execute(query, (username.strip().lower(), password.strip()))
                user = cursor.fetchone()
                return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    def get_user_by_email(self, email: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = "SELECT * FROM users WHERE mail = %s"
                cursor.execute(query, (email,))
                user = cursor.fetchone()
                return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {e}")
            raise
    
    def get_user_by_login(self, login: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LOWER() –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
                query = "SELECT * FROM users WHERE LOWER(login) = LOWER(%s)"
                cursor.execute(query, (login.strip(),))
                user = cursor.fetchone()
                logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É '{login}': {'–Ω–∞–π–¥–µ–Ω' if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
                return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É: {e}")
            raise
    
    def get_user_by_id(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = "SELECT * FROM users WHERE id = %s"
                cursor.execute(query, (user_id,))
                user = cursor.fetchone()
                return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {e}")
            raise
    
    def update_user(self, user_id: int, user_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            allowed_fields = ['login', 'password', 'token', 'mail', 'server', 'accountId', 'api_key', 'token_trello']
            filtered_data = {k: v for k, v in user_data.items() if k in allowed_fields and v is not None}
            
            if not filtered_data:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å UPDATE
            set_clause = ", ".join([f"{field} = %s" for field in filtered_data.keys()])
            query = f"UPDATE users SET {set_clause} WHERE id = %s"
            values = list(filtered_data.values()) + [user_id]
            
            with self.db.get_cursor() as (cursor, connection):
                cursor.execute(query, values)
                affected_rows = cursor.rowcount
                connection.commit()
                
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                return affected_rows > 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
    
    def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with self.db.get_cursor() as (cursor, connection):
                query = "SELECT * FROM users ORDER BY login"
                cursor.execute(query)
                users = cursor.fetchall()
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                return users
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã - –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db_manager = None
promo_repo = None
informing_repo = None
user_repo = None

def optimize_database():
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global db_manager
    if db_manager is None:
        return
    
    try:
        with db_manager.get_cursor(dictionary=False) as (cursor, connection):
            logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ JOIN –∑–∞–ø—Ä–æ—Å–æ–≤ (MySQL —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
            indexes = [
                ("idx_informing_promo_id", "informing", "promo_id"),
                ("idx_promotions_start_date", "promotions", "start_date"),
                ("idx_promotions_project", "promotions", "project"),
                ("idx_promotions_responsible_id", "promotions", "responsible_id"),
                ("idx_informing_promo_start", "informing", "promo_id, start_date"),
                ("idx_users_login", "users", "login")
            ]
            
            created_count = 0
            for index_name, table_name, columns in indexes:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
                    check_query = f"""
                        SELECT COUNT(*) 
                        FROM information_schema.statistics 
                        WHERE table_schema = DATABASE() 
                        AND table_name = '{table_name}' 
                        AND index_name = '{index_name}'
                    """
                    cursor.execute(check_query)
                    exists = cursor.fetchone()[0] > 0
                    
                    if not exists:
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        create_query = f"CREATE INDEX {index_name} ON {table_name}({columns})"
                        cursor.execute(create_query)
                        created_count += 1
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name}")
                    else:
                        logger.info(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
            
            connection.commit()
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_db_manager():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global db_manager, promo_repo, informing_repo, user_repo
    
    if db_manager is None:
        try:
            db_manager = DatabaseManager()
            promo_repo = PromoRepository(db_manager)
            informing_repo = InformingRepository(db_manager)
            user_repo = UserRepository(db_manager)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimize_database()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    return db_manager

def get_repositories():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    get_db_manager()  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    return promo_repo, informing_repo, user_repo 